#!/bin/bash

###----------------------------------------------------------
### VARIABLES ###

GREEN="$(tput setaf 2)"
RESET="$(tput sgr0)"
BLUE="$(tput setf 1)"
CYAN="$(tput setf 3)" 
RED="$(tput setf 4)" 
user=`whoami`
execdir=$HOME/PIS
base="base.txt"
aur="aur.txt"
gitrepos="gitrepos.txt"

###---------------------------------------------------------
### FUNCTIONS ###

### SEPERATOR  ##

sep() {
    echo -e "\n"
    for i in $( seq 1 $COLUMNS ); do echo -n "$1"; done
    echo -e "\n"
}

#[[## INSTALLING PACKAGES (PACMAN,AUR) ##]]#

install_packages_dir() {
    echo ""
    echo -ne "\r${RED}[ ]${RESET} Installing packages using pacman ..." 
    sudo pacman -Syyu --noconfirm >/dev/null 2>>/$execdir/errors.log
	while read line;
	do
		if [ "${line:0:1}" != "#" ] && [ "${#line}" != 0 ]; then
            sudo pacman -S "$line" --noconfirm >/dev/null 2>>/$execdir/errors.log
            status=$(echo $?)
		fi
	done < $execdir/$base
    if [ "$status" == 0 ]; then
        echo -ne "\r${GREEN}[*]${RESET} Installing packages using pacman ${GREEN}[Done]$RESET{}"
        echo "0" >> $execdir/exitstatus.txt
    else
        echo -ne "\r${RED}[*]${RESET} Installing packages using pacman ${RED}[Error]${RESET}" 
        echo "1" >> $execdir/exitstatus.txt
    fi
}


install_packages_aur() {
    echo ""
    echo -ne "\r${RED}[ ]${RESET} Installing packages from AUR ..." 
	while read line;
	do
        if [ "${line:0:1}" != "#" ] && [ "${#line}" != 0 ]; then
            cd $HOME 
            git clone https://aur.archlinux.org/"$line".git >/dev/null 2>>/$execdir/errors.log
            cd $HOME/$line >/dev/null 2>>/$execdir/errors.log
            makepkg -si --noconfirm >/dev/null 2>>/$execdir/errors.log
            status=$(echo $?)
            rm $HOME/$line -rf >/dev/null 2>>/$execdir/errors.log
        fi
	done < $execdir/$aur
    if [ "$status" == 0 ]; then
        echo -ne "\r${GREEN}[*]${RESET} Installing packages from AUR ${GREEN}[Done]${RESET}"
        echo "0" >> $execdir/exitstatus.txt
    else
        echo -ne "\r${RED}[*]${RESET} Installing packages from AUR ${RED}[Error]${RESET}" 
        echo "1" >> $execdir/exitstatus.txt
    fi
}

#[[## DOWNLOADING GITREPOS AND SETTING DOTFILES ##]]#

gitrepos_download() {
    echo ""
    echo -ne "\r${RED}[ ]${RESET} Downloading git Repos ..." 
	while read line;
	do
        if [ "${line:0:1}" != "#" ] && [ "${#line}" != 0 ]; then
            cd $HOME 
            repo=`echo $line | cut -d '|' -f1`
            git clone "$repo" >/dev/null 2>>/$execdir/errors.log
            status=$(echo $?)
        fi
	done < $execdir/$gitrepos
    if [ "$status" == 0 ]; then
        echo -ne "\r${GREEN}[*]${RESET} Downloading git repos ${GREEN}[Done]${RESET}"
        echo "0" >> $execdir/exitstatus.txt
    else
        echo -ne "\r${RED}[*]${RESET} Downloading git repos ${RED}[Error]${RESET}" 
        echo "1" >> $execdir/exitstatus.txt
    fi
}

install_dotfiles() {
    echo ""
    echo -ne "\r${RED}[ ]${RESET} Installing Dotfiles ..." 
    if [ -d $HOME/.dotfiles ]; then 
        status=1
    else
        ls -Al $HOME/.dotfiles | awk '{print $9}' | while read line;
        do
            if [ "$line" != .config ] && [ "$line" != .git ] && [ ${#line} != 0 ] && [ ! -L "$HOME/$line" ]; then 
                ln -s $HOME/.dotfiles/"$line" $HOME/"$line" >/dev/null 2>>/$execdir/errors.log 
            fi
            status=$(echo $?)
        done
        ls -Al $HOME/.dotfiles/.config | awk '{print $9}' | while read line;
        do
            if [ ${#line} != 0 ] && [ ! -L "$HOME/.config/$line" ]; then 
                ln -s $HOME/.dotfiles/.config/"$line" $HOME/.config/"$line" >/dev/null 2>>/$execdir/errors.log
            fi
            status=$(echo $?)
        done
    fi
    if [ "$status" == 0 ]; then
        echo -ne "\r${GREEN}[*]${RESET} Installing Dotfiles ${GREEN}[Done]${RESET}"
        echo "0" >> $execdir/exitstatus.txt
    else
        echo -ne "\r${RED}[*]${RESET} Installing Dotfiles ${RED}[Error]${RESET}" 
        echo "1" >> $execdir/exitstatus.txt
    fi
}

#[[## INIT ##]]#

logo() {
	echo -e "\n${CYAN}POST-INSTALLATON-SCRIPT\n-----------------------${RESET}\n"
}

is_root() {
	if [ "$user" == "root" ]; then
		echo -e "${RED}\nERROR : Do not RUN as ROOT!. stopping script.${RESET}"
		sep "="
		exit 1
	fi
}

network() {
    wget -q --spider http://google.com
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}\nNetwork OK.${RESET}"
    else
        echo -e "${RED}\nERROR : Network Unavailable. stopping script.${RESET}"
        sep "="
        exit 1
    fi
}

start_qn() {
	echo "Hey $USER",
	read -p "Start installer ? (Y/n) : " yes_no
	if [ "$yes_no" != y ] && [ "$yes_no" != Y ] && [ ${#yes_no} -ne 0 ]; then
		echo -e "${RED}\nERROR : Your input caused the installer to stop.${RESET}"
		sep "="
		exit 1
	fi
}

filenfolders() {
    if [ -f $HOME/.bashrc ]; then rm $HOME/.bashrc; fi
    if [ -f $HOME/.bash_profile ]; then rm $HOME/.bash_profile; fi
    if [ -f "$execdir/exitstatus.txt" ]; then rm $execdir/exitstatus.txt; fi
    if [ -f "$execdir/errors.log" ]; then rm $execdir/errors.log; fi
	if [ ! -d "$HOME/.config" ]; then mkdir $HOME/.config; fi
	if [ ! -f "$execdir/$base" ] || [ ! -f "$execdir/$gitrepos" ] || [ ! -f "$execdir/$aur" ];  then
		echo -e "${RED}\nERROR : Required file/files [base,aur,gitrepos] not found. Stopping script.${RESET}"
		sep "="
		exit 1
	else
		echo -e "${GREEN}Required files [base,aur,gitrepos] OK.${RESET}"
	fi
}

init() {
	clear
	sep "="
	logo
	start_qn
    network
	is_root
	filenfolders 
}

#[[## conclusion ##]]#

conclusion() {
    status=`cat $execdir/exitstatus.txt | grep '1' | wc -l`
    if [ "$status" == 0 ]; then
        echo -e "\n\n${GREEN}The Installation was succesfull.\nGoing for a reboot in 10 sec (CTRL-C to cancel).${RESET}\n"
        echo "The system will reboot in 10 seconds ..."
        sep "="
        sleep 10
        sudo reboot
   else
        echo -e "\n\n${RED}The Installation was a FAILURE.\nOne or more errors occured during the Installation.${RESET}\n"
        echo "Fix the problem and run again. (Check error.log for more details on occured errors)"
        sep "="
    fi
}

#[[## EXTRA SETUP ##]]#

setup_home() {
	cd $HOME
	mkdir Documents Pictures Files Music Videos Downloads 
	mkdir $HOME/Pictures/Screenshots 
	mv $HOME/Wallpapers $HOME/Pictures/ 
	mv $HOME/Suckless-builds/ $HOME/Files/ 
	mv $HOME/Books $HOME/Files/
	mv $HOME/PIS/ $HOME/Files/ 
}

build_suckless(){
	ls -l $HOME/Files/Suckless-builds | awk '{print $9}' | while read line;
	do
		cd $HOME/Files/Suckless-builds/$line
		sudo make clean install
        cd $HOME/Files/Suckless-builds
	done
}

extra_setup() {
    echo ""
    echo -ne "\r${RED}[ ]${RESET} Additional Setup ..." 
	setup_home >/dev/null 2>>/$execdir/errors.log
    status_0=$(echo $?)
	build_suckless >/dev/null 2>>/$execdir/errors.log
    status_1=$(echo $?)
    if [ "$status_0" == 0 ] && [ "$status_1" == 0 ]; then
        echo -ne "\r${GREEN}[*]${RESET} Additional Setup ... ${GREEN}[Done]${RESET}"
        echo "0" >> $execdir/exitstatus.txt
    else
        echo -ne "\r${RED}[*]${RESET} Additional Setup ${RED}[Error]${RESET}" 
        echo "1" >> $execdir/exitstatus.txt
    fi
}

###----------------------------------------------------------
### MAIN-FUNCTION ###

main() {
	init 
	install_packages_dir 
	install_packages_aur
	gitrepos_download
	install_dotfiles
	extra_setup
	conclusion
}

###----------------------------------------------------------
### EXECUTION ###

main

###----------------------------------------------------------
### END ###
