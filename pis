#!/bin/bash

###----------------------------------------------------------
### VARIABLES ###

GREEN="$(tput setaf 2)"
RESET="$(tput sgr0)"
BLUE="$(tput setf 1)"
CYAN="$(tput setf 3)" 
RED="$(tput setf 4)" 
user=`whoami`
execdir=$HOME/PIS
base="base.txt"
aur="aur.txt"
gitrepos="gitrepos.txt"

###---------------------------------------------------------
### FUNCTIONS ###

### SEPERATOR  ##

sep() {
    echo -e "\n"
    for i in $( seq 1 $COLUMNS ); do echo -n "$1"; done
    echo -e "\n"
}

#[[## INSTALLING PACKAGES (PACMAN,AUR) ##]]#

install_packages_dir() {
	echo -e "${GREEN}\nDownloading and Installing packages (with pacman)\n-------------------------------------------------${RESET}\n"
	while read line;
	do
		if [ "${line:0:1}" == "#" ]; then
			if [ "${line:0:3}" == "###" ]; then
				echo -e "\n${GREEN}[Installing $line]${RESET}\n"
			fi
		else
			if [ "${#line}" != 0 ]; then
				sudo pacman -S "$line" --noconfirm
			fi
		fi
	done < $execdir/$base
}


install_packages_aur() {
	echo -e "${GREEN}Downloading and Installing packages (from aur)\n--------------------------------------------${RESET}"
	while read line;
	do
		if [ "${line:0:1}" == "#" ]; then
			if [ "${line:0:3}" == "###" ]; then
				echo -e "\n${GREEN}[Installing $line]${RESET}\n"
			fi
		else
			if [ "${#line}" != 0 ]; then
				cd $HOME
				git clone https://aur.archlinux.org/"$line".git
				cd $HOME/$line
				makepkg -si --noconfirm
                rm $HOME/$line -rf
			fi
		fi

	done < $execdir/$aur
}

#[[## DOWNLOADING GITREPOS AND SETTING DOTFILES ##]]#

gitrepos_download() {
	echo -e "\n${GREEN}Downloading Git repos\n----------------------${RESET}\n"
	cd $HOME
	while read line;
	do
		if [ "${line:0:1}" == "#" ]; then
			if [ "${line:0:3}" == "###" ]; then
				echo -e "\n${GREEN}[Installing $line]${RESET}\n"
			fi
		else
			if [ "${#line}" != 0 ]; then
				cd ~/
				repo=`echo $line | cut -d '|' -f1`
				heading=`echo $line | cut -d '|' -f2`
				echo -e "\n${GREEN}Cloning $heading ...${RESET}\n"
				git clone "$repo"
			fi
		fi
	done < $execdir/$gitrepos
}

install_dotfiles() {
	echo -e "\n${GREEN}Installing .dotfiles\n--------------------${RESET}\n"
    if [ -f $HOME/.bashrc ]; then rm $HOME/.bashrc; fi 
    if [ -f $HOME/.bash_profile ]; then rm $HOME/.bash_profile; fi 
	ls -Al $HOME/.dotfiles | awk '{print $9}' | while read line;
	do
		if [ "$line" != .config ] && [ "$line" != .git ] && [ ${#line} != 0 ]; then ln -s $HOME/.dotfiles/"$line" $HOME/"$line"; fi
	done
	ls -Al $HOME/.dotfiles/.config | awk '{print $9}' | while read line;
	do
        if [ ${#line} != 0 ]; then ln -s $HOME/.dotfiles/.config/"$line" $HOME/.config/"$line"; fi
	done
	echo -e "${GREEN}Dotfiles installed${RESET}\n"
}

#[[## INIT ##]]#

logo() {
	echo -e "\n${CYAN}POST-INSTALLATON-SCRIPT\n-----------------------${RESET}\n"
}

is_root() {
	if [ "$user" == "root" ]; then
		echo -e "${RED}\nERROR : Do not RUN as ROOT!. stopping script.\n${RESET}"
		sep "="
		exit 1
	fi
}

start_qn() {
	echo "Hey $USER",
	read -p "Start installer ? (y/n) : " yes_no
	if [ "$yes_no" != y ] && [ "$yes_no" != Y ]; then
		echo -e "${RED}\nERROR : Your input caused the installer to stop.${RESET}\n"
		sep "="
		exit 1
	fi
}

req_filenfolders() {
	if [ ! -d "$HOME/.config" ]; then
		mkdir $HOME/.config
	fi
	if [ -f "$execdir/$base.txt" ] || [ -f "$execdir/$gitrepos.txt" ] || [ -f "$execdir/$aur.txt" ];  then
		echo -e "${RED}\nERROR : Required file/files [base,aur,gitrepos] not found. Stopping script.\n${RESET}"
		sep "="
		exit 1
	else
		echo -e "${GREEN}\nRequired files [base,aur,gitrepos] satisfied.\n${RESET}"
	fi
}

init() {
	logo
	is_root
	start_qn
	req_filenfolders 
}

#[[## reboot ##]]#

rebooot() {
    echo -e "\n${GREEN}The Installation was succesfull.\nGoing for a reboot in 10 sec (CTRL-C to cancel).${RESET}\n"
    for i in $( seq 10 -1 0 ); do 
        echo -ne "\rThe system will reboot in $i seconds ..."
        sleep 1
    done
    sep "="
	sudo reboot
}

#[[## EXTRA SETUP ##]]#

setup_home() {
	echo -e "${GREEN}Setting HOME ...${RESET}\n"
	cd $HOME
	mkdir Documents Pictures Files Music Videos Downloads
	mkdir $HOME/Pictures/Screenshots
	mv $HOME/Wallpapers $HOME/Pictures/
	mv $HOME/Suckless-builds/ $HOME/Files/
	mv $HOME/Books $HOME/Files/
	mv $HOME/PIS/ $HOME/Files/
}

warp_setup() {
	echo -e "${GREEN}Setting WARP ...${RESET}\n"
	sudo systemctl enable warp-svc.service
	sudo systemctl start warp-svc
	warp-cli register
	warp-cli connect
	warp-cli set-families-mode full
}

build_suckless(){
	echo -e "${GREEN}Building Suckless ...${RESET}\n"
	ls -l $HOME/Files/Suckless-builds | awk '{print $9}' | while read line;
	do
		cd $HOME/Files/Suckless-builds/$line
		sudo make clean install
        cd $HOME/Files/Suckless-builds
	done
}

extra_setup() {
	echo -e "\n${GREEN}RUNNING ADDITIONAL SETUP\n------------------------${RESET}\n"
	setup_home
	build_suckless
	warp_setup
	echo -e "\n${GREEN}ADDITIONAL SETUP DONE.${RESET}\n"
}

###----------------------------------------------------------
### MAIN-FUNCTION ###

main() {
	clear
	sep "="
	init 
	sep "-"
	install_packages_dir
	sep "-"
	install_packages_aur
	sep "-"
	gitrepos_download
	sep "-"
	install_dotfiles
	sep "-"
	extra_setup
	sep "-"
	rebooot
}

###----------------------------------------------------------
### EXECUTION ###

main

###----------------------------------------------------------
### END ###
