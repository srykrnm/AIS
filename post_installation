#!/bin/bash

###----------------------------------------------------------
### VARIABLES ###

RESET=$'\e[0m'
RED=$'\e[31m'
GREEN=$'\e[32m'
BLUE=$'\e[34m'
CYAN=$'\e[36m'
user=`whoami`
execdir=$HOME/PIS
config=$execdir/config.in


###---------------------------------------------------------
### FUNCTIONS ###

### SOURCING-CONFIGS ###

source_config() {
    base=()
    aur=()
    gitrepos=()
    homedir=()
    while read line;
    do
        if [ "${line:0:1}" != "#" ] && [ "${#line}" != 0 ]; then
            if [ "$line" == '[ PACMAN ]' ]; then array=base;
            elif [ "$line" == '[ AUR ]' ]; then array=aur;
            elif [ "$line" == '[ HOME-DIR ]' ]; then array=homedir;
            elif [ "$line" == '[ GIT-REPOS ]' ]; then array=gitrepos; fi
            if [ "$array" == 'base' ] && [ "$line" != '[ PACMAN ]' ]; then base+=( $line );
            elif [ "$array" == 'aur' ] && [ "$line" != '[ AUR ]' ]; then aur+=( $line );
            elif [ "$array" == 'homedir' ] && [ "$line" != '[ HOME-DIR ]' ]; then homedir+=( $line );
            elif [ "$array" == 'gitrepos' ] && [ "$line" != '[ GIT-REPOS ]' ]; then gitrepose+=( $line ); fi
        fi
    done < $config
}

### SEPERATOR  ##

sep() {
    echo -e "\n"
    for i in $( seq 1 $COLUMNS ); do echo -n "$1"; done
    echo -e "\n"
}

#[[## INSTALLING PACKAGES (PACMAN,AUR) ##]]#

pacman_install() {
    echo ""
    echo -ne "\r${RED}[ ]${RESET} Installing packages using pacman ..." 
    sudo pacman -Syyu --noconfirm >/dev/null 2>>/$execdir/errors.log
	for line in "${base[@]}";
	do
        sudo pacman -S "$line" --noconfirm >/dev/null 2>>/$execdir/errors.log
        status=$(echo $?)
	done 
    if [ "$status" == 0 ]; then
        echo -ne "\r${GREEN}[*]${RESET} Installing packages using pacman ${GREEN}[Done]$RESET{}"
        echo "0" >> $execdir/exitstatus.txt
    else
        echo -ne "\r${RED}[*]${RESET} Installing packages using pacman ${RED}[Error]${RESET}" 
        echo "1" >> $execdir/exitstatus.txt
    fi
}


aur_install() {
    echo ""
    echo -ne "\r${RED}[ ]${RESET} Installing packages from AUR ..." 
	for line in "${aur[@]}";
	do
        cd $HOME 
        git clone https://aur.archlinux.org/"$line".git >/dev/null 2>>/$execdir/errors.log
        cd $HOME/$line >/dev/null 2>>/$execdir/errors.log
        makepkg -si --noconfirm >/dev/null 2>>/$execdir/errors.log
        status=$(echo $?)
        rm $HOME/$line -rf >/dev/null 2>>/$execdir/errors.log
	done 
    if [ "$status" == 0 ]; then
        echo -ne "\r${GREEN}[*]${RESET} Installing packages from AUR ${GREEN}[Done]${RESET}"
        echo "0" >> $execdir/exitstatus.txt
    else
        echo -ne "\r${RED}[*]${RESET} Installing packages from AUR ${RED}[Error]${RESET}" 
        echo "1" >> $execdir/exitstatus.txt
    fi
}

#[[## DOWNLOADING GITREPOS AND SETTING DOTFILES ##]]#

gitrepos_download() {
    echo ""
    echo -ne "\r${RED}[ ]${RESET} Downloading git Repos ..." 
	for line in "${gitrepos[@]}";
	do
        cd $HOME 
        repo=`echo $line | cut -d '|' -f1`
        git clone "$repo" >/dev/null 2>>/$execdir/errors.log
        status=$(echo $?)
	done
    if [ "$status" == 0 ]; then
        echo -ne "\r${GREEN}[*]${RESET} Downloading git repos ${GREEN}[Done]${RESET}"
        echo "0" >> $execdir/exitstatus.txt
    else
        echo -ne "\r${RED}[*]${RESET} Downloading git repos ${RED}[Error]${RESET}" 
        echo "1" >> $execdir/exitstatus.txt
    fi
}

install_dotfiles() {
    echo ""
    echo -ne "\r${RED}[ ]${RESET} Installing Dotfiles ..." 
    if [ ! -d $HOME/.dotfiles ]; then 
        status=1
    else
        if [ -f $HOME/.bashrc ]; then rm $HOME/.bashrc; fi
        if [ -f $HOME/.profile ]; then rm $HOME/.profile; fi
        ls -Al $HOME/.dotfiles | awk '{print $9}' | while read line;
        do
            if [ "$line" != .config ] && [ "$line" != .git ] && [ ${#line} != 0 ] && [ ! -L "$HOME/$line" ]; then 
                ln -s $HOME/.dotfiles/"$line" $HOME/"$line" >/dev/null 2>>/$execdir/errors.log 
            fi
            status=$(echo $?)
        done
        ls -Al $HOME/.dotfiles/.config | awk '{print $9}' | while read line;
        do
            if [ ${#line} != 0 ] && [ ! -L "$HOME/.config/$line" ]; then 
                ln -s $HOME/.dotfiles/.config/"$line" $HOME/.config/"$line" >/dev/null 2>>/$execdir/errors.log
            fi
            status=$(echo $?)
        done
    fi
    if [ "$status" == 0 ]; then
        echo -ne "\r${GREEN}[*]${RESET} Installing Dotfiles ${GREEN}[Done]${RESET}"
        echo "0" >> $execdir/exitstatus.txt
    else
        echo -ne "\r${RED}[*]${RESET} Installing Dotfiles ${RED}[Error]${RESET}" 
        echo "1" >> $execdir/exitstatus.txt
    fi
}

#[[## INIT ##]]#

logo() {
	echo -e "\n${CYAN}POST-INSTALLATON-SCRIPT\n-----------------------${RESET}\n"
}

is_root() {
	if [ "$user" == "root" ]; then
		echo -e "${RED}\nERROR : Do not RUN as ROOT!. stopping script.${RESET}"
		sep "="
		exit 1
	fi
}

network() {
    wget -q --spider http://google.com
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}\nNetwork OK.${RESET}"
    else
        echo -e "${RED}\nERROR : Network Unavailable. stopping script.${RESET}"
        sep "="
        exit 1
    fi
}

start_qn() {
	echo "Hey $USER",
	read -p "Start installer ? (Y/n) : " yes_no
	if [ "$yes_no" != y ] && [ "$yes_no" != Y ] && [ ${#yes_no} -ne 0 ]; then
		echo -e "${RED}\nERROR : Your input caused the installer to stop.${RESET}"
		sep "="
		exit 1
	fi
}

filenfolders() {
    if [ -f "$execdir/exitstatus.txt" ]; then rm $execdir/exitstatus.txt; fi
    if [ -f "$execdir/errors.log" ]; then rm $execdir/errors.log; fi
	if [ ! -d "$HOME/.config" ]; then mkdir $HOME/.config; fi
	if [ ! -f "$config" ];  then
		echo -e "${RED}\nERROR : Required file \'config\' not found. Stopping script.${RESET}"
		sep "="
		exit 1
	else
		echo -e "${GREEN}Required files satisfied.${RESET}"
	fi
}

init() {
	clear
	sep "="
	logo
	start_qn
    network
	is_root
	filenfolders 
    source_stuff
}

#[[## conclusion ##]]#

conclusion() {
    status=`cat $execdir/exitstatus.txt | grep '1' | wc -l`
    if [ "$status" == 0 ]; then
        echo -e "\n\n${GREEN}The Installation was succesfull.\nGoing for a reboot in 10 sec (CTRL-C to cancel).${RESET}\n"
        echo "The system will reboot in 10 seconds ..."
        sep "="
        sleep 10
        sudo reboot
   else
        echo -e "\n\n${RED}The Installation was a FAILURE.\nOne or more errors occured during the Installation.${RESET}\n"
        echo "Fix the problem and run again. (Check error.log for more details on occured errors)"
        sep "="
    fi
}

#[[## EXTRA SETUP ##]]#

setup_home_folders() {
    for line in "${homedir[@]}";
    do
        mkdir $line
    done
}

setup_git_folders() {
    for line in "${gitrepos[@]}";
    do
        name=`echo $line | cut -d '|' -f2`
        path=`echo $line | cut -d '|' -f3`
        mv $HOME/$name $path
    done
}

build_suckless(){
	ls -l $HOME/Files/Suckless-builds | awk '{print $9}' | while read line;
	do
		cd $HOME/Files/Suckless-builds/$line
		sudo make clean install
        cd $HOME/Files/Suckless-builds
	done
}

extra_setup() {
    echo ""
    echo -ne "\r${RED}[ ]${RESET} Additional Setup ..." 
	setup_home_folders >/dev/null 2>>/$execdir/errors.log
    status_0=$(echo $?)
    setup_git_folders 2>>/$execdir/errors.log
    status_1=$(echo $?)
	build_suckless >/dev/null 2>>/$execdir/errors.log
    status_2=$(echo $?)
    if [ "$status_0" == 0 ] && [ "$status_1" == 0 ] && [ "$status_2" == 0 ]; then
        echo -ne "\r${GREEN}[*]${RESET} Additional Setup ... ${GREEN}[Done]${RESET}"
        echo "0" >> $execdir/exitstatus.txt
    else
        echo -ne "\r${RED}[*]${RESET} Additional Setup ${RED}[Error]${RESET}" 
        echo "1" >> $execdir/exitstatus.txt
    fi
}

###----------------------------------------------------------
### MAIN-FUNCTION ###

main() {

	init 
    pacman_install
    aur_install
	gitrepos_download
	install_dotfiles
	extra_setup
	conclusion

}

###----------------------------------------------------------
### EXECUTION ###

main

###----------------------------------------------------------
### END ###
